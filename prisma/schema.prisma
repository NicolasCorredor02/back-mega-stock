// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// MySQL configuration
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

generator client {
  provider = "prisma-client-js"
}

// Definición de modelos

model Product {
  id          String            @id @default(uuid())
  title       String
  price       Float
  description String
  code        String            @unique
  thumbnails  Json // Array de URLs como JSON en MySQL
  stock       Int
  status      Boolean           @default(true)
  category    String
  carts       ProductsOnCarts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Address {
  id          String  @id @default(uuid())
  street      String
  city        String
  state       String
  country     String
  postal_code String
  is_saved    Boolean @default(false)

  // Relaciones
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  carts  Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model PaymentMethod {
  id          String  @id @default(uuid())
  type        String // card, paypal, transfer
  provider    String? // Solo para tarjetas
  card_number String? // Solo para tarjetas
  last_four   String? // Solo para tarjetas
  expiry_date String? // Solo para tarjetas
  reference   String? // Para paypal o transfer
  is_saved    Boolean @default(false)

  // Relaciones
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  carts  Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_methods")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  password      String?
  first_name    String
  last_name     String?
  phone         String?
  id_number     String
  security      Int     @default(0) // Intentos de inicio de sesión
  image_profile String // URL de la imagen
  status        Boolean @default(true)
  platform      String  @default("")

  // Relaciones integradas
  addresses       Address[]
  payment_methods PaymentMethod[]
  carts           Cart[]

  // Datos de comercio
  total_spent     Float     @default(0)
  last_order_date DateTime?
  custom_tier     String    @default("regular")

  @@map("users")
}

model Cart {
  id        String @id @default(uuid())
  user_type String // guest o registered

  // Datos de usuario guest
  guest_first_name String?
  guest_last_name  String?
  guest_email      String?
  guest_phone      String?
  guest_id_number  String?

  // Relaciones
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?

  status    String            @default("active") // active, completed, canceled, pending
  sub_total Float             @default(0)
  products  ProductsOnCarts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// Tabla de relación para productos en carritos
model ProductsOnCarts {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int

  @@unique([productId, cartId])
  @@map("products_on_carts")
}
